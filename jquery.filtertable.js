// Generated by CoffeeScript 1.6.1
(function() {

  (function($, window) {
    var Plugin, defaults, document, pluginName;
    pluginName = 'filterTable';
    document = window.document;
    defaults = {
      callback: null,
      columnSelector: 'td',
      containerClass: 'filter-table',
      containerTag: 'p',
      highlightClass: 'alt',
      inputName: 'filter-table',
      inputPlaceholder: 'search this table',
      inputType: 'search',
      inputLabel: 'Filter:',
      minRows: 8,
      quickList: [],
      quickListContainerClass: 'quick',
      quickListContainerTag: 'ol',
      quickListItemClass: 'quick',
      quickListItemTag: 'li',
      rowSelector: 'tbody > tr',
      visibleClass: 'visible'
    };
    Plugin = (function() {

      function Plugin(element, options) {
        this.element = element;
        this.options = $.extend({}, defaults, options);
        this.$element = $(this.element);
        this.$rows = this.$element.find(this.options.rowSelector);
        this.$filter_container = null;
        this.$quick_list_container = null;
        this._defaults = defaults;
        this._name = pluginName;
        this.init();
      }

      Plugin.prototype.init = function() {
        if (!this.$element.is('table')) {
          return;
        }
        if (!(this.$rows.length >= this.options.minRows)) {
          return;
        }
        this.build_selector();
        this.build_filter();
        return this.build_quick_list();
      };

      Plugin.prototype.filter_table = function(str) {
        var $found_cells, $found_rows, filter_selector;
        if (str === '') {
          this.show_all_rows();
        } else {
          this.hide_all_rows();
          filter_selector = this.get_filter_selector(str);
          $found_cells = this.$rows.find(this.options.columnSelector).filter(filter_selector);
          $found_cells.addClass(this.options.highlightClass);
          $found_rows = $found_cells.closest('tr');
          $found_rows.show().addClass(this.options.visibleClass);
        }
        if (this.options.callback) {
          return this.options.callback(str, this.$element);
        }
      };

      Plugin.prototype.show_all_rows = function() {
        this.$rows.show().addClass(this.options.visibleClass);
        return this.$rows.find("td." + this.options.highlightClass).removeClass(this.options.highlightClass);
      };

      Plugin.prototype.hide_all_rows = function() {
        this.$rows.hide().removeClass(this.options.visibleClass);
        return this.$rows.find('td').removeClass(this.options.highlightClass);
      };

      Plugin.prototype.get_clean_str = function(str) {
        return str.replace(/(['"])/g, "\\$1");
      };

      Plugin.prototype.get_filter_selector = function(str) {
        return ":filterTableFind(\"" + (this.get_clean_str(str)) + "\")";
      };

      Plugin.prototype.build_selector = function() {
        return $.expr[":"].filterTableFind = function(a, i, m) {
          return $(a).text().toUpperCase().indexOf(m[3].toUpperCase()) >= 0;
        };
      };

      Plugin.prototype.build_filter_container = function() {
        return $("<" + this.options.containerTag + " />").addClass(this.options.containerClass);
      };

      Plugin.prototype.build_filter_input = function() {
        return $("<input type='" + this.options.inputType + "' placeholder='" + this.options.inputPlaceholder + "' name='" + this.options.inputName + "' />");
      };

      Plugin.prototype.build_filter_label = function() {
        if (!this.options.inputLabel) {
          return;
        }
        return $("<label for='" + this.options.inputName + "' />").html(this.options.inputLabel);
      };

      Plugin.prototype.build_filter = function() {
        var $input, $label,
          _this = this;
        this.$filter_container = this.build_filter_container();
        $input = this.build_filter_input();
        $label = this.build_filter_label();
        if ($label) {
          this.$filter_container.append($label);
        }
        this.$filter_container.append($input);
        if ($.fn.bindWithDelay) {
          $input.bindWithDelay('keyup', (function(e) {
            return _this.filter_table($(e.target).val());
          }), 200);
        } else {
          $input.on('keyup', (function(e) {
            return _this.filter_table($(e.target).val());
          }));
        }
        $input.on('click search', (function(e) {
          return _this.filter_table($(e.target).val());
        }));
        return this.$element.before(this.$filter_container);
      };

      Plugin.prototype.build_quick_list_container = function() {
        return $("<" + this.options.quickListContainerTag + " />").addClass(this.options.quickListContainerClass);
      };

      Plugin.prototype.build_quick_list_item = function(str) {
        var $item, $link, clean_str;
        clean_str = str.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
        $item = $("<" + this.options.quickListItemTag + " />").addClass(this.options.quickListItemClass);
        $link = $("<a href='#' />").html(clean_str);
        return $item.append($link);
      };

      Plugin.prototype.build_quick_list = function() {
        var $item, str, _i, _len, _ref,
          _this = this;
        if (!(this.options.quickList.length > 0)) {
          return;
        }
        this.$quick_list_container = this.build_quick_list_container();
        _ref = this.options.quickList;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          str = _ref[_i];
          $item = this.build_quick_list_item(str);
          this.$quick_list_container.append($item);
        }
        this.$quick_list_container.on('click', 'a', function(e) {
          var $input;
          e.preventDefault();
          str = $(e.target).html();
          $input = _this.$filter_container.find("input");
          return $input.val(str).focus().trigger('click');
        });
        return this.$element.before(this.$quick_list_container);
      };

      return Plugin;

    })();
    return $.fn[pluginName] = function(options) {
      return this.each(function() {
        if (!$.data(this, "plugin_" + pluginName)) {
          return $.data(this, "plugin_" + pluginName, new Plugin(this, options));
        }
      });
    };
  })(jQuery, window);

}).call(this);
